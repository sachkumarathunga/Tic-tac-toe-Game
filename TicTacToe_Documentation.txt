
# **Tic-Tac-Toe Game Documentation**

## **Introduction**
This project is a fully functional Tic-Tac-Toe game implemented with a focus on code quality, user experience, and scalability. The application supports multiplayer functionality, allows spectators to view games in real time, and includes various enhancements to provide an engaging user experience.

---

## **Features Implemented**

### **Core Functionalities**
1. **User Registration**  
   - Players can register to participate in the game.
   - Stores user credentials securely in a database.

2. **Game Board**  
   - Displays a responsive Tic-Tac-Toe game board.
   - Supports multiple board sizes (3x3, 4x4, 5x5).

3. **Player Turns**  
   - Implements a turn-based system to manage player moves.
   - Validates moves to ensure correctness.

4. **Winning Conditions**  
   - Checks for winning combinations in rows, columns, and diagonals.
   - Recognizes draw situations when the board is full.

5. **Play Against AI**  
   - Supports AI opponent functionality with strategic move selection.

6. **Game Replay History**  
   - Logs all moves made during the game for detailed replay.

7. **Spectator Mode**  
   - Allows non-players to join games as spectators with real-time updates.

---

## **Features Implemented**

### **Core Functionalities**
1. **User Registration and Login**  
   - Allows players to register with unique credentials for participation.  
   - Credentials are securely stored in the database, ensuring user privacy.  
   - Facilitates seamless login and authentication for returning players.
   - Ensures seamless registration without strict verification as simple gaming platform.

2. **Interactive Game Board**  
   - Renders a dynamic and visually responsive Tic-Tac-Toe game board.  
   - Supports variable grid sizes (3x3, 4x4, 5x5), adapting to user preferences.  
   - Ensures smooth interaction and real-time updates for all participants.

3. **Turn-Based Gameplay**  
   - Implements a structured turn-taking mechanism for player moves.  
   - Validates user inputs to prevent invalid moves and ensures fairness.  
   - Dynamically switches turns and updates the UI to reflect game progress.

4. **Winning and Draw Conditions**  
   - Dynamically detects winning combinations across rows, columns, and diagonals.  
   - Identifies draw scenarios when all cells are filled without a winner.  
   - Provides real-time feedback to players on the game outcome.

5. **AI Gameplay Mode**  
   - Allows players to compete against a strategically programmed AI opponent.  
   - AI evaluates the game state to make optimal moves, providing a challenging experience.  
   - Handles complex scenarios like blocking winning moves or achieving its own win.

6. **Game Replay History**  
   - Maintains a detailed record of all moves made during a game session.  
   - Replay data is accessible for post-game analysis and debugging.  
   - Supports spectators and players in reviewing the game progress step-by-step.

7. **Spectator Mode**  
   - Enables third-party users to join games as spectators in real-time.  
   - Provides synchronized updates of the game board and current status.  
   - Keeps spectators informed of player turns, moves, and outcomes.

8. **Chat Functionality**  
   - Integrated chat feature allowing players and spectators to communicate during games.  
   - Supports real-time messaging with minimal latency.  
   - Messages are persisted in the database and synchronized across all connected users.

---

## **Key Enhancements**
1. **Customizable Board Sizes**  
   - Players can select preferred board sizes to adjust the game's complexity.  
   - Configurations are seamlessly managed, ensuring consistency across all players and spectators.

2. **Real-Time Synchronization**  
   - Employs polling or WebSocket mechanisms for instant updates of game state and chat.  
   - Ensures a synchronized experience for all participants, even in high-latency environments.

3. **Responsive Grid Rendering**  
   - Adapts dynamically to different board configurations and screen sizes.  
   - Ensures an optimal user experience across mobile, tablet, and desktop platforms.

4. **Robust Error Handling**  
   - Provides clear and actionable error messages for invalid moves, disconnections, or server issues.  
   - Prevents crashes and gracefully handles unexpected scenarios.

5. **Advanced Replay History**  
   - Displays a chronological list of all moves for easy tracking and replay.  
   - Facilitates a transparent game experience and allows spectators to follow the game seamlessly.

6. **Enhanced Winning Visuals**  
   - Highlights the winning cells on the board with animations and effects.  
   - Displays celebratory messages and sound effects upon game completion.  
   - Improves user engagement with an immersive endgame experience.

7. **Music and Audio Effects**  
   - Adds a layer of interactivity with background music and sound effects for moves and wins.  
   - Includes toggles for enabling or disabling audio for user convenience.

8. **Cross-Platform Responsiveness**  
   - A mobile-first design ensures a consistent and responsive UI on any device.  
   - Simplifies navigation and interactions for players and spectators alike.

9. **Integrated Chat with History**  
   - Chat feature supports in-game communication between players and spectators.  
   - Messages are displayed chronologically and stored in the database for later review.  
   - Chat updates are synchronized in real-time to maintain consistency.

10. **AI Decision-Making Enhancements**  
    - AI evaluates both winning and blocking strategies for optimal gameplay.  
    - Makes decisions based on board state, adding depth to the AI challenge.  
    - Offers a competitive experience with varying difficulty levels.


---

## **Dependency Installation**

### **Frontend**
1. **React Framework**  
   Install React dependencies:  
   ```bash
   npm install react react-dom
   ```

2. **Additional Dependencies**  
   Install the required packages for UI and animations:  
   ```bash
   npm install axios react-router-dom
   npm install --save @emotion/react @emotion/styled
   npm install react-icons
   ```

3. **Run Frontend**  
   To start the React app:  
   ```bash
   npm start
   ```

### **Backend**
1. **Node.js and Express**  
   Install core backend dependencies:  
   ```bash
   npm install express body-parser cors sqlite3
   ```

2. **Game Logic**  
   Ensure the `gameLogic.js` helper is implemented correctly for AI and winning condition checks.

3. **Run Backend**  
   Start the backend server:  
   ```bash
   node server.js
   ```

---

## **Usage Instructions**
1. **Player Registration**  
   - Navigate to the registration page to sign up.
   - Enter a valid username to join or create a game.

2. **Create a Game**  
   - Select board size and start a new game.
   - Share the game key with another player or AI.

3. **Play the Game**  
   - Players take turns placing their marks on the grid.
   - View real-time updates and move history.

4. **Spectator Mode**  
   - Use the game key to join as a spectator and watch the game progress live.

---

## **Lessons Learned**
- **Scalability:** Implementing dynamic grid rendering made the app scalable for varying board sizes.  
- **Error Handling:** Improved resilience by addressing edge cases and server-client communication issues.  
- **Real-Time Features:** Polling and real-time updates enhanced the user experience, especially for spectators.  

---

## **Contact**
For any queries regarding the project, please contact:  
**Sachini**  
Email: [your_email@example.com]

